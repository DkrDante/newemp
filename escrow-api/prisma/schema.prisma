// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  userType      UserType  @default(client)
  avatar        String?
  bio           String?
  location      String?
  skills        String    @default("[]")
  hourlyRate    Float?
  rating        Float     @default(0)
  reviewCount   Int       @default(0)
  isVerified    Boolean   @default(false)
  isOnline      Boolean   @default(false)
  lastSeen      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  jobs          Job[]
  proposals     Proposal[]
  payments      Payment[]
  sentMessages  Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  portfolio     Portfolio[]
  reviews       Review[]
  receivedReviews Review[] @relation("ReceivedReviews")
}

model Job {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  budget      Float
  minBudget   Float?
  maxBudget   Float?
  duration    String?
  location    String?
  category    String?
  tags        String    @default("[]")
  status      JobStatus @default(open)
  isFeatured  Boolean   @default(false)
  viewCount   Int       @default(0)
  proposalCount Int     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  proposals   Proposal[]
  payments    Payment[]
  messages    Message[]
  reviews     Review[]
}

model Proposal {
  id        Int       @id @default(autoincrement())
  message   String
  price     Float
  status    ProposalStatus @default(pending)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  job       Job       @relation(fields: [jobId], references: [id])
  jobId     Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}

model Payment {
  id          Int           @id @default(autoincrement())
  amount      Float
  status      PaymentStatus @default(pending)
  paymentType PaymentType   @default(escrow)
  transactionId String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  job         Job           @relation(fields: [jobId], references: [id])
  jobId       Int
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String
  type      MessageType @default(text)
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  
  sender    User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId  Int
  receiver  User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  job       Job?      @relation(fields: [jobId], references: [id])
  jobId     Int?
}

model Portfolio {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  category    String
  tags        String    @default("[]")
  clientName  String?
  completedAt DateTime?
  likes       Int       @default(0)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Review {
  id        Int       @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  
  reviewer  User      @relation(fields: [reviewerId], references: [id])
  reviewerId Int
  reviewed  User      @relation("ReceivedReviews", fields: [reviewedId], references: [id])
  reviewedId Int
  job       Job?      @relation(fields: [jobId], references: [id])
  jobId     Int?
}

enum UserType {
  client
  freelancer
}

enum JobStatus {
  open
  in_progress
  completed
  cancelled
}

enum ProposalStatus {
  pending
  accepted
  rejected
}

enum PaymentStatus {
  pending
  funded
  released
  refunded
  disputed
}

enum PaymentType {
  escrow
  direct
  milestone
}

enum MessageType {
  text
  file
  image
  system
}
